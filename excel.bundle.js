/*! For license information please see excel.bundle.js.LICENSE.txt */
(()=>{"use strict";var e={124:(e,t,i)=>{i.r(t)},859:(e,t,i)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.Base=void 0;const n=i(928),s=i(140);class r extends s.EventEmitter{constructor(e){super();const t=this.getDefaultCfg();this._cfg=n._merge(t,e)}getDefaultCfg(){return{}}get(e){return e.split(".").reduce(((e,t)=>e[t]),this._cfg)}set(e,t){this._cfg[e]=t}_setObj(e){if(!n.isObj(e))return;const t=this.getDefaultCfg();for(const i in e)t[i]&&this.set(i,e[i])}}t.Base=r},964:(e,t,i)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.AbstraCanvas=void 0;const n=i(859),s=i(928),r={fontColor:"fillStyle",bgcolor:"fillStyle",linecolor:"strokeStyle",linewidth:"lineWidth",opacity:"globalAlpha"};class o extends n.Base{constructor(e){super({container:e}),this._initContainer(),this._initDom()}getDefaultCfg(){return super.getDefaultCfg()}drawRegion(e,t){const i=this.get("context"),{left:n,top:s,width:r,height:o}=e;i.clearRect(n,s,r,o),i.save(),i.beginPath(),i.rect(n,s,r,o),i.clip(),t(),i.restore()}drawLine(e,t){const i=this.get("context");i.beginPath(),i.moveTo(e.x,e.y),i.lineTo(t.x,t.y),i.stroke()}drawRect(e,t,i){const n=this.get("context"),{left:r,top:o,width:a,height:l}=e;if(n.beginPath(),n.rect(r,o,a,l),n.fillStyle=t,s.isString(i)){const[e,t,s]=i.split(" ");"dash"===t&&n.setLineDash([10,10]),n.lineWidth=e.endsWith("px")?e.slice(0,-2):e,n.strokeStyle=s}n.fill(),n.stroke()}applyAttrToCtx(e){const t=this.get("context");Object.keys(e).forEach((i=>{const n=e[i];t[r[i]?r[i]:i]=n}))}clearRect(e,t,i,n){this.get("context").clearRect(e,t,i,n)}getViewRange(){return{left:0,top:0,width:this.get("width"),height:this.get("height")}}getPointByClient(e,t){const i=this.get("el").getBoundingClientRect();return{x:e-i.left,y:t-i.top}}getClientByPoint(e,t){const i=this.get("el").getBoundingClientRect();return{x:e+i.left,y:t+i.top}}_initContainer(){let e=this.get("container");"string"==typeof e&&(e=document.getElementById(e),this.set("container",e))}_initDom(){const e=this._createDom();this.set("el",e)}_createDom(){const e=document.createElement("canvas"),t=e.getContext("2d");return this.set("context",t),e}_setDOMSize(){const e=this.get("width"),t=this.get("height"),i=this.get("el"),n=this.get("context"),s=this._getPixelRatio();i.width=s*e,i.height=s*t,i.style.cssText=`transform:scale(${1/s});transform-origin:0 0`,s>1&&n.scale(s,s),this.get("container").appendChild(i)}_getPixelRatio(){const e=this.get("pixelRatio")||(window?window.devicePixelRatio:1),t=e>=1?Math.ceil(e):1;return this.set("pixelRatio",t),t}}t.AbstraCanvas=o},718:(e,t,i)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.BaseRange=void 0;const n=i(859);class s extends n.Base{constructor(e,t){super(t),this._props=e,this._canvas=e.canvas,this._ctx=this._canvas.get("context"),this._style=this.get("style")}getDefaultCfg(){return super.getDefaultCfg()}}t.BaseRange=s},312:(e,t,i)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.Shape=void 0;const n=i(859);class s extends n.Base{constructor(e,t){super(t),this.engine=e}getDefaultCfg(){return super.getDefaultCfg()}createRender(){return""}initEvent(){}creatHook(){}}t.Shape=s},30:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0});const i=["A","B","C","D","E","F","G","H","I","J","K","L","M","N","O","P","Q","R","S","T","U","V","W","X","Y","Z"];t.default={stringAt:e=>{let t="",n=e;for(;n>=i.length;)n/=i.length,n-=1,t+=i[parseInt(n,10)%i.length];return t+=i[e%i.length],t},indexAt:e=>{let t=0;for(let n=0;n<e.length-1;n+=1){const s=e.charCodeAt(n)-65,r=e.length-1-n;t+=Math.pow(i.length,r)+i.length*s}return t+=e.charCodeAt(e.length-1)-65,t}}},449:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.defaultCanvasOption=t.defaultEngineOption=void 0,t.defaultEngineOption={container:null,viewOption:{showToolbar:!0,showCtxMenu:!0,viewHeight:document.documentElement.clientHeight,viewWidth:document.documentElement.clientWidth},interactOption:{canEdit:!0}},t.defaultCanvasOption={width:t.defaultEngineOption.viewOption.viewWidth,height:t.defaultEngineOption.viewOption.viewHeight}},913:(e,t,i)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.RegisterView=t.Engine=void 0;const n=i(449),s=i(132),r=i(859),o=i(140),a=i(560),l=i(274);class c extends r.Base{constructor(e){super(e);const t={viewHeight:this.get("viewOption.viewHeight"),viewWidth:this.get("viewOption.viewWidth")};this.canvasRender=new s.CanvasRender(e.container,t);const i=new l.ViewModel(this.canvasRender);this.dataModel=new a.DataModel(i,t),this.dataModel.emit=this.emit.bind(this),this.domRender=new s.DomRender(this,e);const n=new o.EventController(this);this._setObj({eventcontroller:n})}getDefaultCfg(){return Object.assign({},n.defaultEngineOption)}griddata(e){return this.dataModel.resetGrid(e),this}source(e){return this.dataModel.source(e),this}setRange(e){return this.dataModel.command({type:"setRange",properties:e}),this}getIdxByPoint(e){return this.dataModel.getIdxByPoint(e)}getRange(){return this.dataModel.getRange()}getCell(e){return this.dataModel.getCell(e)}getSumHeight(){return this.dataModel.getSumHeight()}getSumWidth(){return this.dataModel.getSumWidth()}getBoxSize(){const[e,t]=this.dataModel.getRealContentSize();return{viewH:this.get("viewOption.viewHeight"),viewW:this.get("viewOption.viewWidth"),contentH:e,contentW:t}}getStatus(){return this.dataModel.getStatus()}changeCursor(e){this.domRender.changeCursor(e)}}t.Engine=c,c.ViewDomMap={},t.RegisterView=function(e,t){c.ViewDomMap[t]=e,e.prototype.name=t}},148:(e,t,i)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.EventController=t.ExcelEvent=void 0;const n=i(928);var s;(s=t.ExcelEvent||(t.ExcelEvent={})).CLICK="click",s.DBLCLICK="dblclick",s.MOUSEDOWN="mousedown",s.MOUDEUP="mouseup",s.CONTEXTMENU="contextmenu",s.MOUSEENTER="mouseenter",s.MOUSEOUT="mouseout",s.MOUSEOVER="mouseover",s.MOUSEMOVE="mousemove",s.MOUSELEAVE="mouseleave",s.KEYUP="keyup",s.KEYDOWN="keydown",s.WHEEL="wheel",s.FOCUS="focus",s.BLUR="blur",s.CANVAS_CONTEXTMENU="canvas:contextmenu",s.CANVAS_CLICK="canvas:click",s.CANVAS_DBLCLICK="canvas:dblclick",s.CANVAS_MOUSEDOWN="canvas:mousedown",s.CANVAS_MOUSEUP="canvas:mouseup",s.CANVAS_MOUSEENTER="canvas:mouseenter",s.CANVAS_MOUSELEAVE="canvas:mouseleave",s.CANVAS_MOUSEMOVE="canvas:mousemove",s.CANVAS_MOUSEOUT="canvas:mouseout",s.CANVAS_MOUSEOVER="canvas:mouseover",s.CANVAS_CELLCLICK="canvas:cellclick",s.CANVAS_SELECT="canvas:select",s.CANVAS_SCROLL="canvas:scroll",s.CANVAS_RESIZE="canvas:resize",t.EventController=class{constructor(e){this.destroyed=!1,this.extendEvents=[],this.multiSelect=!1,this.isResizing=!1,this.el=null,this.engine=e,this.initEvents()}initEvents(){const{engine:e,extendEvents:t=[]}=this,i=e.domRender.get("el");this.el=i,t.push(n.addEventListener(i,"DOMMouseScroll",this.onWheelEvent.bind(this))),t.push(n.addEventListener(i,"mousewheel",this.onWheelEvent.bind(this))),t.push(n.addEventListener(i,"mousemove",this.onCanvasEvents.bind(this))),t.push(n.addEventListener(i,"mouseup",this.onCanvasEvents.bind(this))),t.push(n.addEventListener(i,"mousedown",this.onCanvasEvents.bind(this))),t.push(n.addEventListener(i,"click",this.onCanvasEvents.bind(this))),"undefined"!=typeof window&&(t.push(n.addEventListener(window,"keydown",this.onExtendEvents.bind(this))),t.push(n.addEventListener(window,"keyup",this.onExtendEvents.bind(this))),t.push(n.addEventListener(window,"focus",this.onExtendEvents.bind(this)))),t.push(n.addEventListener(window,"onbeforeunload",this.unload.bind(this)))}onCanvasEvents(e){const{engine:t}=this,i=t.domRender,n=e.type,s=i.getPointByClient(e.clientX,e.clientY);if(e.canvasX=s.x,e.canvasY=s.y,"mousedown"===n)this.onMouseDown(e);else if("mousemove"===n)this.onMouseMove(e);else if("mouseup"===n&&this.multiSelect)return this.multiSelect=!1,void(this.selectStartRect=null);t.emit(`canvas:${n} `,e)}onMouseDown(e){Array.from(e.target.classList).includes("xexcel-scrollbar")||(2===e.detail?this.onCanvasDblClick(e):e.shiftKey||this.onCanvasClick(e))}onMouseMove(e){const{engine:t}=this;if(this.engine.changeCursor("auto"),!this.checkResizerCell(e)&&this.selectStartRect&&!this.isResizing&&1===e.buttons&&!e.shiftKey){const i=t.getIdxByPoint({x:e.canvasX,y:e.canvasY});let[n,s]=[i.ri,i.ci];if(-1===n&&-1===s)return;let{ri:r,ci:o}=this.selectStartRect;r>=n&&([r,n]=[n,r]),o>=s&&([o,s]=[s,o]);const a=i.left+i.width-this.selectStartRect.left,l=i.top+i.height-this.selectStartRect.top;t.emit("canvas:select",{sri:r,sci:o,eri:n,eci:s,left:this.selectStartRect.left,top:this.selectStartRect.top,width:a,height:l}),this.multiSelect=!0}}unload(){this.engine.emit("destroy"),this.engine.dataModel.export(),this.destroy()}destroy(){const{extendEvents:e}=this;n.each(e,(e=>{e.remove()})),this.extendEvents.length=0,this.destroyed=!0}onCanvasClick(e){const{engine:t}=this,i=this.checkResizerCell(e);if(i)return void this.handleResize(e,i);this.selectStartRect=null;const n=t.getIdxByPoint({x:e.canvasX,y:e.canvasY});this.selectStartRect=n,t.emit("canvas:cellclick",n)}onCanvasDblClick(e){const{engine:t}=this;this.selectStartRect&&t.emit("canvas:dblclick",this.selectStartRect)}onWheelEvent(e){n.isNil(e.wheelDelta)&&(e.wheelDelta=-e.detail),this.engine.emit("wheel",e)}onExtendEvents(e){this.engine.emit(e.type,e)}mouseMoveUp(e,t){const i=n.addEventListener(this.el,"mousemove",e.bind(this)),s=n.addEventListener(this.el,"mouseup",function(e){i.remove(),s.remove(),t.call(this,e)}.bind(this))}checkResizerCell(e){const{fixedColWidth:t,fixedRowHeight:i}=this.engine.getStatus();if(e.canvasX>t&&e.canvasY>i)return null;const s=this.engine.getIdxByPoint({x:e.canvasX,y:e.canvasY});if(-1===s.ci&&-1===s.ri)return null;if(-1===s.ci||-1===s.ri){const t=-1===s.ri,{lineoffset:i}=s,r=t?s.width:s.height,o=t?e.canvasX:e.canvasY,a=~~(r/6);if(n.isBetween(o,i-a,i+a))return this.engine.changeCursor(t?"col-resize":"row-resize"),s}return null}handleResize(e,t){const i=this.engine.canvasRender;i.saveDrawingSurface();const{rowminsize:n,colminsize:s,sumheight:r,sumwidth:o}=this.engine.getStatus(),a=-1===t.ri,l=a?s:n;let c=e,h=a?t.width:t.height;this.mouseMoveUp((function(e){this.isResizing=!0,i.restoreDrawingSurface(),null!==c&&1===e.buttons&&(h+=a?e.movementX:e.movementY,h>l&&function(e){const t=i.get("context");t.strokeStyle="#4b89ff",t.setLineDash([10,10]),t.lineWidth=3,t.beginPath(),a?(t.moveTo(e,0),t.lineTo(e,r)):(t.moveTo(0,e),t.lineTo(o,e)),t.stroke()}(h+t[a?"left":"top"]),c=e)}),(function(){c=null,this.isResizing=!1,i.restoreDrawingSurface();const e=a?t.width:t.height;h<l&&(h=l),this.engine.dataModel.command({type:"resizeGrid",isCol:a,idx:a?t.ci:t.ri,diff:h-e})}))}}},896:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.EventEmitter=void 0,t.EventEmitter=class{constructor(){this._events={}}on(e,t,i){return this._events[e]||(this._events[e]=[]),this._events[e].push({callback:t,once:!!i}),this}once(e,t){return this.on(e,t,!0)}emit(e,...t){(i=>{let n=i.length;for(let s=0;s<n;s++){if(!i[s])continue;const{callback:r,once:o}=i[s];o&&(i.splice(s,1),0===i.length&&delete this._events[e],n--,s--),r.apply(this,t)}})(this._events[e]||[])}getEvents(){return this._events}off(e,t){if(e)if(t){const i=this._events[e]||[];let n=i.length;for(let e=0;e<n;e++)i[e].callback===t&&(i.splice(e,1),n--,e--);0===i.length&&delete this._events[e]}else delete this._events[e];else this._events={};return this}}},140:(e,t,i)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.EventEmitter=t.EventController=void 0;var n=i(148);Object.defineProperty(t,"EventController",{enumerable:!0,get:function(){return n.EventController}});var s=i(896);Object.defineProperty(t,"EventEmitter",{enumerable:!0,get:function(){return s.EventEmitter}})},852:(e,t,i)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.Command=void 0;const n=i(928);function s(e,t,i){let s={};try{s=this._proxyViewdata.cellmm[e][t]}catch(t){this._proxyViewdata.cellmm[e]=s}const r=n._merge(s,i);this._proxyViewdata.cellmm[e][t]=r,this._mdata.cellmm[e]=this._mdata.cellmm[e]||s,this._mdata.cellmm[e][t]=r}t.Command={setRange(e){var t,i;const{rangeidxes:r,properties:o}=e,a=r&&n.parseRangeKey(r)||this._selectIdxes;let{sri:l,sci:c,eri:h,eci:d}=a;const u=(null===(t=this._scrollIdexes)||void 0===t?void 0:t.ri)||0,g=(null===(i=this._scrollIdexes)||void 0===i?void 0:i.ci)||0;l+=u,c+=g,h+=u,d+=g;for(let e=l;e<=h;e++)for(let t=c;t<=d;t++)s.call(this,e,t,o)},scrollView(e){const{distance:t,isVertical:i}=e,{row:n,col:s}=this._grid;let r=0,o=0;const a=i?n.len:s.len,l=i?e=>this.getRowHeight(e):e=>this.getColWidth(e);for(let e=1;e<a;e++){const i=l(e-1);if(r+i>t)break;o=e,r+=i}this._scrollOffset[i?"y":"x"]=r,this._scrollIdexes[i?"ri":"ci"]=o,this.computedGridMap(this._scrollIdexes),this._proxyViewdata.gridmap=this._computedgridmap,this._proxyViewdata.scrollIdexes=this._scrollIdexes,this.emit("canvas:scroll",{x:this._scrollOffset.x,y:this._scrollOffset.y,ri:this._scrollIdexes.ri,ci:this._scrollIdexes.ci})},resizeGrid(e){const{diff:t,isCol:i,idx:s}=e,r=this._proxyViewdata.gridmap[i?"col":"row"];n.each(r,((e,n)=>{s===n?e[i?"width":"height"]+=t:n>s&&(e[i?"left":"top"]+=t)})),this._mdata[i?"colm":"rowm"][s]=this._mdata[i?"colm":"rowm"][s]||{},this._mdata[i?"colm":"rowm"][s].size=r[s][i?"width":"height"],this.emit("canvas:resize",{key:`${i?"colm":"rowm"}[${s}]`})}}},560:(e,t,i)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.DataModel=t.BUFFERPADDING=t.FIXEDHEADERMARGIN=void 0;const n=i(928),s=i(852);t.FIXEDHEADERMARGIN={left:50,top:25},t.BUFFERPADDING=2;const r={row:{len:100,size:25,minsize:25},col:{len:25,size:25,minsize:30},colm:{},rowm:{},cellmm:{}};t.DataModel=class{constructor(e,t){this._initcellmm={},this._selectIdxes=null,this._scrollIdexes={ri:0,ci:0},this._scrollOffset={x:0,y:0},this._selectIdxes={sri:1,sci:1,eri:1,eci:1},this._viewModel=e,Promise.resolve().then((()=>{this._init(t)}))}_getDefaultSource(){return Object.assign(Object.assign({viewHeight:800,viewWidth:400},r),{scrollOffset:{x:0,y:0}})}_init(e){const t=this._getDefaultSource(),i=Object.assign(t,this._grid,e),s=n._merge(i.cellmm,this._initcellmm);i.cellmm=s;const r=this.import();this._mdata=n._merge(i,r),this.computedGridMap(this._scrollIdexes),this._proxyViewdata=this._viewModel.init(Object.assign({gridmap:this._computedgridmap,cellmm:this._initcellmm,scrollIdexes:this._scrollIdexes},this._mdata))}resetGrid(e){return this._grid=n._merge(r,e),this._boxrealsize=this.getRealContentSize(this._grid),this._grid}computedGridMap(e){const[i,n]=this._buildLinesForRows(!0,e.ri),[s,r]=this._buildLinesForRows(!1,e.ci);this._computedgridmap={fixedpadding:t.FIXEDHEADERMARGIN,rowsumheight:i,colsumwidth:s,row:n,col:r}}source(e){const{cellmm:t}=e;n.isObj(t)&&(this._initcellmm=t)}command(e){return s.Command[e.type].call(this,e)}getIdxByPoint(e){const{row:i,col:n}=this._proxyViewdata.gridmap,s={ri:-1,ci:-1,left:0,top:0,width:0,height:0};for(let t=0;t<i.length;t++)i[t].top<e.y&&e.y<=i[t+1].top&&Object.assign(s,i[t-1]);for(let t=0;t<n.length;t++)n[t].left<e.x&&e.x<=n[t+1].left&&Object.assign(s,n[t-1]);return-1===s.ci&&s.ri>=0?(s.width=this._computedgridmap.fixedpadding.left,s.lineoffset=s.top+this._computedgridmap.fixedpadding.top+s.height):-1===s.ri&&s.ci>=0&&(s.height=this._computedgridmap.fixedpadding.top,s.lineoffset=s.left+this._computedgridmap.fixedpadding.left+s.width),s.left+=2*t.BUFFERPADDING,s.top+=t.BUFFERPADDING,s}getRangeOffsetByIdxes(e){return n.draw.getRangeOffsetByIdxes(this._proxyViewdata.gridmap,e)}getRange(){if(!this._selectIdxes)return null;const e=this.getRangeOffsetByIdxes(this._selectIdxes);return Object.assign(Object.assign({},this._selectIdxes),e)}getCell(e){return this._proxyViewdata.cellmm[e.ri]?this._proxyViewdata.cellmm[e.ri][e.ci]:null}getSumHeight(){return this._computedgridmap.rowsumheight}getSumWidth(){return this._computedgridmap.colsumwidth}getRealContentSize(e){if(this._boxrealsize)return this._boxrealsize;const t=e||this._grid,{row:i,col:s,rowm:r,colm:o}=t;let a=s.len*s.size,l=i.len*i.size;return n.each(o,(e=>{a-=s.size,a+=e.size})),n.each(r,(e=>{l-=s.size,l+=e.size})),this._boxrealsize=[l,a],this._boxrealsize}getRowHeight(e){const{row:t,rowm:i}=this._grid;return i[`${e}`]?i[`${e}`].size:t.size}getColWidth(e){const{col:t,colm:i}=this._grid;return i[`${e}`]?i[`${e}`].size:t.size}setSelect(e){return this._selectIdxes=e,e}getStatus(){var e,t;return{sumheight:this.getSumHeight(),sumwidth:this.getSumWidth(),rowminsize:null===(e=this._mdata.row)||void 0===e?void 0:e.minsize,colminsize:null===(t=this._mdata.col)||void 0===t?void 0:t.minsize,fixedColWidth:this._computedgridmap.fixedpadding.left,fixedRowHeight:this._computedgridmap.fixedpadding.top,scroll:{offsetX:this._scrollOffset.x,offsetY:this._scrollOffset.y,ri:this._scrollIdexes.ri,ci:this._scrollIdexes.ci}}}import(){return JSON.parse(localStorage.getItem("excel-2021")||"{}")}export(){const e=JSON.stringify(this._mdata);return localStorage.setItem("excel-2021",e),e}_buildLinesForRows(e,t){const i=this._mdata,n=i[e?"row":"col"].len,s=i[e?"row":"col"].size,r=i[e?"viewHeight":"viewWidth"];let o=0,a=0,l=0;const c=[],h=t||0;for(let t=0;t<n;t++){const n=(i[e?"rowm":"colm"]||{})[t+h],d=n?n.size:s;if(o=a+=d,l+=d,c[t]={[e?"ri":"ci"]:t,[e?"top":"left"]:o-d,[e?"height":"width"]:d},l>=r){c[t+1]={[e?"ri":"ci"]:t+1,[e?"top":"left"]:o,[e?"height":"width"]:d};break}}return[l,c]}}},274:(e,t,i)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.ViewModel=void 0;const n=i(928),s=new WeakMap,r=new WeakMap;t.ViewModel=class{constructor(e){this._canvasRender=e}init(e){return this.state=this.proxy(e,""),this._canvasRender.$store=this.state,this._updateCanvasView(),this.state}proxy(e,t){let i=s.get(e);return void 0!==i?i:r.has(e)?e:(i=new Proxy(e,{get:(e,t)=>{const i=Reflect.get(e,t);return n.isObj(i)?this.proxy(i):i},set:(e,t,i)=>{const n=((e,t)=>Object.prototype.hasOwnProperty.call(e,t))(e,t),s=e[t];i=r.get(i)||i;const o=Reflect.set(e,t,i);return n?i!==s&&this._updateCanvasView():this._updateCanvasView(),o}}),s.set(e,i),r.set(i,e),i)}_updateCanvasView(){this._canvasRender.render()}}},611:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.getRangeOffsetByIdxes=t.getOffsetByIdx=t.isColorProp=void 0,t.isColorProp=e=>["fillStyle","strokeStyle"].includes(e),t.getOffsetByIdx=(e,t,i)=>{const n=e.fixedpadding.top,s=e.fixedpadding.left;if(-1===t&&-1===i)return{left:-s,top:-n,width:s,height:n};if(-1===t)return{left:e.col[i].left,top:-n,width:e.col[i].width,height:n};if(-1===i)return{left:-s,top:e.row[t].top,width:s,height:e.row[t].height};const r=e.col[i].left,o=e.col[i].width;return{left:r,top:e.row[t].top,width:o,height:e.row[t].height}},t.getRangeOffsetByIdxes=(e,i)=>{const{sri:n,sci:s,eri:r,eci:o}=i,a=t.getOffsetByIdx(e,n,s);if(r===n&&o===s)return Object.assign(Object.assign({},a),{right:a.left+a.width,bottom:a.top+a.height});{const i=t.getOffsetByIdx(e,r+1,o+1);return{left:a.left,top:a.top,right:i.left,bottom:i.top,width:i.left-a.left,height:i.top-a.top}}}},54:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.getOffScreenContext=void 0;let i=null;t.getOffScreenContext=function(){if(!i){const e=document.createElement("canvas");e.width=1,e.height=1,i=e.getContext("2d")}return i}},454:(e,t,i)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.getTextWidth=t.assembleFont=void 0;const n=i(54);t.assembleFont=function(e){const{fontSize:t,fontFamily:i,fontWeight:n,fontStyle:s}=e;return[s,n,`${t}px`,i].join(" ").trim()},t.getTextWidth=function(e,t){const i=n.getOffScreenContext();i.save(),i.font=t;const s=i.measureText(e).width;return i.restore(),s}},136:(e,t,i)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.addEventListener=t.createDom=t.modifyCSS=void 0;const n=i(928);t.modifyCSS=function(e,t){if(e){for(const i in t)if(t.hasOwnProperty(i)){let s=t[i];["width","height","top","left","right","bottom"].includes(i)&&(s=n.isString(s)&&s.endsWith("px")?s:`${s}px`),e.style[i]=s}return e}},t.createDom=function(e){const t=document.createElement("div");e=e.replace(/(^\s*)|(\s*$)/g,""),t.innerHTML=""+e;const i=t.childNodes[0];return t.removeChild(i),i},t.addEventListener=function(e,t,i){if(e)return"function"==typeof e.addEventListener?(e.addEventListener(t,i,!1),{remove(){e.removeEventListener(t,i,!1)}}):void 0}},928:(e,t,i)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.getOffScreenContext=t.draw=void 0;const n=i(655);n.__exportStar(i(43),t),t.draw=i(611),n.__exportStar(i(454),t),n.__exportStar(i(980),t);var s=i(54);Object.defineProperty(t,"getOffScreenContext",{enumerable:!0,get:function(){return s.getOffScreenContext}}),n.__exportStar(i(136),t)},43:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.isArray=t.isNil=t.isNull=t.isObj=t.isFunction=t.isString=void 0;const i=(e,t)=>({}.toString.call(e)==="[object "+t+"]");t.isString=e=>i(e,"String"),t.isFunction=e=>i(e,"Function"),t.isObj=e=>null!==e&&"object"==typeof e,t.isNull=function(e){return null===e},t.isNil=function(e){return null==e},t.isArray=function(e){return Array.isArray?Array.isArray(e):i(e,"Array")}},980:(e,t,i)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.isBetween=t.each=t.parseRangeKey=t.getRangeKey=t._merge=void 0;const n=i(928);t._merge=function e(t,i){const s={};for(const e in t)void 0!==t[e]&&(s[e]=t[e]);for(const t in i){if(void 0===i[t])continue;const r=s[t],o=i[t];n.isObj(r)&&n.isObj(o)?s[t]=e(r,o):s[t]=o}return s},t.getRangeKey=function(e,t){return JSON.stringify({sri:+e,sci:+t,eri:+e,eci:+t})},t.parseRangeKey=function(e){return JSON.parse(e)},t.each=function(e,t){if(e)if(n.isArray(e))for(let i=0,n=e.length;i<n;i++)t(e[i],i);else if(n.isObj(e))for(const i in e)e.hasOwnProperty(i)&&t(e[i],i)},t.isBetween=(e,t,i)=>e>=t&&e<=i},406:(e,t,i)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.Editor=void 0;const n=i(928);t.Editor=class{createRender(){return'\n             <div class="xexcel-editor" style="display:none">\n                 <textarea class="xexcel-editor-textarea"></textarea>\n             </div>\n         '}show(e){const t=document.querySelector(".xexcel-editor");this.$editor=t,this.initVal(e.text),n.modifyCSS(t,{visibility:"visible"}),n.modifyCSS(t,e)}changeOffset(e){n.modifyCSS(this.$editor,e)}hide(){const e=document.querySelector(".xexcel-editor");n.modifyCSS(e,{visibility:"hidden"})}initEvent(){document.querySelector(".xexcel-editor textarea").addEventListener("input",(e=>{const t=e.target.value;this.onEdit(t,this.text),this.text=t}))}move(e,t){n.modifyCSS(this.$editor,{transform:`translate3d(-${e}px, -${t}px, 0)`})}initVal(e){this.text=e,document.querySelector(".xexcel-editor textarea").value=e,this._setTextareaRange()}_setTextareaRange(){var e;const t=(null===(e=this.text)||void 0===e?void 0:e.length)||0,i=document.querySelector(".xexcel-editor textarea");i.setSelectionRange(t,t),setTimeout((()=>{i.focus()}),0)}}},132:(e,t,i)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.DomRender=t.CanvasRender=void 0;var n=i(495);Object.defineProperty(t,"CanvasRender",{enumerable:!0,get:function(){return n.CanvasRender}});var s=i(318);Object.defineProperty(t,"DomRender",{enumerable:!0,get:function(){return s.DomRender}})},684:(e,t,i)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.FixedHeaderRange=void 0;const n=i(718),s=i(491),r=i(30),o=i(560);class a extends n.BaseRange{constructor(e){super(e),this._fixedheadermargin=o.FIXEDHEADERMARGIN,this._textRange=new s.TextRange(e,this._cfg.style.text)}getDefaultCfg(){return{style:{bgcolor:"#f4f5f8",linewidth:.5,linecolor:"#d0d0d0",text:{fontColor:"#585757",fontSize:14,fontFamily:"sans-serif"}}}}_resetdata(){this._gridmap=this._canvas.$store.gridmap,this._scrollIdexes=this._canvas.$store.scrollIdexes,this._rect=this._canvas.getViewRange(),this._rowheadrect={left:this._fixedheadermargin.left,top:0,width:this._rect.width,height:this._fixedheadermargin.top},this._colheadrect={left:0,top:this._fixedheadermargin.top,width:this._fixedheadermargin.left,height:this._rect.height}}render(){this._resetdata(),this._ctx.save(),this._ctx.translate(-this._fixedheadermargin.left,-this._fixedheadermargin.top),this._canvas.drawRegion(this._rowheadrect,this._renderHeader.bind(this,!0)),this._canvas.drawRegion(this._colheadrect,this._renderHeader.bind(this,!1)),this._ctx.restore()}_renderHeader(e){const{left:t,top:i,width:n,height:s}=this[e?"_rowheadrect":"_colheadrect"],r=this._gridmap[e?"col":"row"],o=this._scrollIdexes[e?"ci":"ri"],a=this._ctx;a.save(),this._canvas.applyAttrToCtx(Object.assign({},this._style)),a.fillRect(t,i,n,s);let l=e?t:i;const c=e?"width":"height";for(let a=0;a<r.length;a++){const h=r[a][c];e?(this._canvas.drawLine({x:l,y:i},{x:l,y:i+s}),this._textRange.draw({left:l,top:i,width:h,height:s},this._getText(!0,a+o))):(this._canvas.drawLine({x:t,y:l},{x:t+n,y:l}),this._textRange.draw({left:t,top:l,width:n,height:h},this._getText(!1,a+o))),l+=h}a.restore()}_getText(e,t){return e?r.default.stringAt(t):(t+1).toString()}}t.FixedHeaderRange=a},154:(e,t,i)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.GridRange=void 0;const n=i(718),s=i(928),r=i(560);class o extends n.BaseRange{constructor(e){super(e),this.namespace="grid-range",this._fixedheadermargin=r.FIXEDHEADERMARGIN}getDefaultCfg(){return{style:{bgcolor:"#fff",linewidth:1,linecolor:"#333333"}}}render(){this._gridmap=this._canvas.$store.gridmap,this._range={sri:0,eri:this._gridmap.row.length-2,sci:0,eci:this._gridmap.col.length-2},this._rect=this._canvas.getViewRange(),this._renderAll()}_renderAll(){this._ctx.translate(this._fixedheadermargin.left,this._fixedheadermargin.top),this._renderDetail()}_renderDetail(){this._renderGridBg(),this._renderGridLines()}_renderGridBg(){const e=this._ctx;e.save();const{left:t,top:i,width:n,height:s}=this._rect;this._canvas.clearRect(t,i,n,s),this._canvas.applyAttrToCtx({bgcolor:this._style.bgcolor}),e.fillRect(t,i,n,s),e.restore()}_renderGridLines(){const e=this._ctx;e.save(),this._canvas.applyAttrToCtx({linecolor:this._style.linecolor,linewidth:this._style.linewidth}),this._drawLines(),e.restore()}_drawLines(){const e=this._range,{sri:t,sci:i,eci:n,eri:r}=e,{left:o,top:a,right:l,bottom:c,width:h,height:d}=s.draw.getRangeOffsetByIdxes(this._gridmap,e);for(let e=t;e<=r+1;e++){const t=this._gridmap.row[e].top;this._canvas.drawLine({x:o,y:t},{x:l,y:t})}for(let e=i;e<=n+1;e++){const t=this._gridmap.col[e].left;this._canvas.drawLine({x:t,y:a},{x:t,y:c})}}}t.GridRange=o},33:(e,t,i)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.RangeRenderController=void 0;const n=i(154),s=i(684),r=i(491),o=i(822),a=i(928);t.RangeRenderController=class{constructor(e){this.canvas=e,this._gridRange=new n.GridRange(this),this._fixedHeaderRange=new s.FixedHeaderRange(this),this._textRange=new r.TextRange(this),this._styleRange=new o.StyleRange(this)}render(){this.viewdata=this.canvas.$store,this._renderGrid(),this._renderCells()}_renderGrid(){const e=[this._gridRange,this._fixedHeaderRange];for(const t of e)t.render()}_renderCells(){const e=this.viewdata.cellmm,{ri:t,ci:i}=this.viewdata.scrollIdexes;for(const n in e){const s=e[n],r=+n-t;if(r>=0&&s&&s)for(const e in s){const t=s[e],n=+e-i;n>=0&&t&&this._renderCellmm(r,n,t)}}}_renderCellmm(e,t,i){const{gridmap:n}=this.viewdata,s=a.draw.getOffsetByIdx(n,e,t);this.canvas.drawRegion(s,(()=>{this._styleRange.render(s,i),this._textRange.render(s,i)}))}}},822:(e,t,i)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.StyleRange=t.MAX_BORDER_SIZE=void 0;const n=i(718);t.MAX_BORDER_SIZE=3;class s extends n.BaseRange{constructor(e,t){super(e,t),this.namespace="style-range"}getDefaultCfg(){return{bordersize:1,bordercolor:"#333333",borderstyle:"solid",bgcolor:"#fff"}}render(e,t){this._rect=e,this._setObj(t),this._draw(),this._setObj(this.getDefaultCfg())}_draw(){const e=[this.get("bordersize")>t.MAX_BORDER_SIZE?t.MAX_BORDER_SIZE:this.get("bordersize"),this.get("borderstyle"),this.get("bordercolor")].join(" ");this._canvas.drawRect(this._rect,this.get("bgcolor"),e)}}t.StyleRange=s},491:(e,t,i)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.TextRange=void 0;const n=i(718),s=i(928),r=i(822);class o extends n.BaseRange{constructor(e,t){super(e,t),this.namespace="text-range",this._setFont()}getDefaultCfg(){return{fontColor:"#000",fontSize:12,fontFamily:"sans-serif",fontWeight:"normal",fontStyle:"normal",cellPadding:4,lineHeight:12*.14}}render(e,t={text:""}){const{text:i}=t;i&&(this._setObj(t),this._setFont(),e.left,r.MAX_BORDER_SIZE,e.top,r.MAX_BORDER_SIZE,e.width,r.MAX_BORDER_SIZE,e.height,r.MAX_BORDER_SIZE,this.draw(e,i),this._setObj(this.getDefaultCfg()))}draw(e,t){const i=this._ctx,n=this.get("cellPadding"),{left:r,top:o,width:a,height:l}=e,[c,h]=[a-2*n,l-2*n],d=this.get("font");if(this._canvas.applyAttrToCtx(this._cfg),Math.ceil(s.getTextWidth(t,d))<a){this._canvas.applyAttrToCtx(Object.assign(Object.assign({},this._cfg),{textAlign:"center",textBaseline:"middle"}));const[e,n]=[r+a/2,o+l/2];return void i.fillText(t,e,n)}this._canvas.applyAttrToCtx(Object.assign(Object.assign({},this._cfg),{textAlign:"left",textBaseline:"top"}));const u={len:0,start:0,height:0,count:0},g=this.get("fontSize")+this.get("lineHeight"),f=~~(h/g),p=r+n;let v=o+n;for(let e=0;e<t.length&&u.count<f;e++){const n=t[e];if(u.len+=s.getTextWidth(n,d),u.len>c){u.count+=1;let n="";n=u.count===f?t.substring(u.start,e-1)+"...":t.substring(u.start,e+1),i.fillText(n,p,v),v+=g,u.len=0,u.height+=g,u.start=e+1}}u.len>0&&i.fillText(t.substring(u.start),p,v)}_setFont(){const e=s.assembleFont(this._cfg);this.set("font",e)}}t.TextRange=o},495:(e,t,i)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.CanvasRender=void 0;const n=i(449),s=i(33),r=i(964);class o extends r.AbstraCanvas{constructor(e,t){super(e),this._rangeRenderController=new s.RangeRenderController(this),this.set("width",t.viewWidth),this.set("height",t.viewHeight),this._setDOMSize()}getDefaultCfg(){return n.defaultCanvasOption}render(){this.set("width",this.$store.viewWidth),this.set("height",this.$store.viewHeight),this._setDOMSize(),this._rangeRenderController.render()}saveDrawingSurface(){const e=this.get("context"),t=this._getPixelRatio();this._curImageData=e.getImageData(0,0,this.get("width")*t,this.get("height")*t)}restoreDrawingSurface(){this._curImageData&&this.get("context").putImageData(this._curImageData,0,0)}_setDOMSize(){super._setDOMSize(),setTimeout((()=>{const e=this.get("el").getBoundingClientRect(),t={left:e.left,top:e.top,width:e.width,height:e.height};this.clientRect=t}))}_createDom(){const e=super._createDom();return e.id="xexcel-canvas",e}}t.CanvasRender=o},318:(e,t,i)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.DomRender=void 0;const n=i(859),s=i(928),r=i(913),o=i(560);class a extends n.Base{constructor(e,t){super(t),this._domroot=null,this._domrootInner=null,this._engine=e,this.shapeList=[];const i=t.container;this.set("el",i);const n=this.get("viewOption.viewWidth")+"px",r=this.get("viewOption.viewHeight")+"px";s.modifyCSS(i,{width:n,height:r,overflow:"hidden"}),this._domrootInner=s.createDom('<div class="xexcel-main-table-inner"></div>'),this.createShape("toolbar"),this.createShape("selector"),this.createShape("scrollbar"),this.initContainer(),Promise.resolve().then(this.initEvent.bind(this))}createShape(e){let t=null,i=null;if("string"==typeof e&&(t=r.Engine.ViewDomMap[e],i=e),!t)return;const n=new t(this._engine);this.shapeList.push(n);const o=n.createRender(),a=s.createDom(o);"toolbar"===i?this.get("container").append(a):this._domrootInner.append(a)}initContainer(){this._domroot=s.createDom('<div class="xexcel-main-table"></div>'),this._domroot.append(this._domrootInner);const e=o.FIXEDHEADERMARGIN.left-o.BUFFERPADDING+"px",t=o.FIXEDHEADERMARGIN.top-o.BUFFERPADDING+"px";s.modifyCSS(this._domrootInner,{left:e,top:t,width:`calc(100% - ${e}`,height:`calc(100% - ${t}`}),this.get("container").append(this._domroot),this.set("el",this._domroot)}initEvent(){for(const e of this.shapeList)e.initEvent()}getPointByClient(e,t){const i=this.get("el").getBoundingClientRect();return{x:e-i.left,y:t-i.top}}changeCursor(e){e=e||"auto",s.modifyCSS(this.get("el"),{cursor:e})}}t.DomRender=a},544:(e,t,i)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.ScrollBar=void 0;const n=i(312),s=i(928);class r extends n.Shape{initEvent(){const e=document.querySelector(".xexcel-scrollbar-wrapper .vertical"),t=document.querySelector(".xexcel-scrollbar-wrapper .horizontal");this.$vertical=e,this.$horizontal=t,this.initSize(),s.addEventListener(e,"scroll",(e=>this.onScroll(!0,e))),s.addEventListener(t,"scroll",(e=>this.onScroll(!1,e))),this.engine.on("wheel",(e=>{const{scroll:t}=this.engine.getStatus();if(e.deltaY>0){const e=t.offsetY+this.engine.dataModel.getRowHeight(t.ri);this.$vertical.scroll({top:e})}else{const e=0===t.ri?0:t.offsetY-50;this.$vertical.scroll({top:e})}}))}createRender(){return'\n            <div class="xexcel-scrollbar-wrapper">\n                <div class="xexcel-scrollbar vertical" style="display: none">\n                    <div class="xexcel-scrollbar-inner inner" style="width: 1px;"></div>\n                </div>\n                <div class="xexcel-scrollbar horizontal" style="display: none">\n                    <div class="xexcel-scrollbar-inner inner" style="height: 1px;"></div>\n                </div>\n            </div>\n        '}initSize(){const e=this.$vertical.querySelector(".inner"),t=this.$horizontal.querySelector(".inner"),{viewH:i,viewW:n,contentH:r,contentW:o}=this.engine.getBoxSize(),a=r>i,l=o>n;s.modifyCSS(this.$vertical,{height:i+"px",display:a?"block":"none"}),s.modifyCSS(e,{height:r+"px"}),s.modifyCSS(this.$horizontal,{width:n+"px",display:l?"block":"none"}),s.modifyCSS(t,{width:o+"px"})}onScroll(e,t){const{scrollTop:i,scrollLeft:n}=t.target,s=e?i:n;this.engine.dataModel.command({type:"scrollView",distance:s,isVertical:e})}}t.ScrollBar=r},340:(e,t,i)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.Selector=void 0;const n=i(928),s=i(312),r=i(406);class o extends s.Shape{constructor(e,t){super(e,t),this.isEditing=!1,this.isSelectWhole=!1,this.editor=new r.Editor,this.editor.onEdit=this.handleEdit.bind(this)}initEvent(){const e=document.querySelector(".xexcel-selector .xexcel-selector-area");this.$selector=e,this.engine.on("canvas:cellclick",(e=>{this.isEditing&&(this.isEditing=!1,this.editor.hide(),this.engine.dataModel.command({type:"setRange",properties:{text:this._editorText}}),this._editorText=""),this.handleSelect(Object.assign({sri:e.ri,sci:e.ci,eri:e.ri,eci:e.ci},e))})).on("canvas:select",(e=>{this.isEditing=!1,this.editor.hide(),this.handleSelect(e)})).on("canvas:dblclick",(e=>{if(this.isSelectWhole)return;const t=this.engine.getCell({ri:e.ri,ci:e.ci})||{};this._editorText=t.text||"",this.isEditing=!0,this.editor.show(Object.assign(Object.assign({},this._cellOffset),{text:this._editorText}))})).on("canvas:scroll",(e=>{this._cellOffset&&(this._cellOffset.top+=e.y,this._cellOffset.left+=e.x,n.modifyCSS(this.$selector,{transform:`translate3d(-${e.x}px, -${e.y}px, 0)`}),this.editor.move(e.x,e.y))})).on("canvas:resize",(e=>{if(!this._cellOffset)return;const t=this.engine.getRange();this.changeSelectOffset(t)})),this.editor.initEvent()}createRender(){return`\n            <div class="xexcel-selector">\n                <div class="xexcel-selector-area" contenteditable="true" style="display:none">\n                    <div class="xexcel-selector-corner"></div>\n                </div>\n                ${this.editor.createRender()}\n            </div>\n        `}handleSelect(e){this.editor.move(0,0),n.modifyCSS(this.$selector,{transform:"translate3d(0, 0, 0)"}),this.isSelectWhole=!1;const{sri:t,sci:i,eri:s,eci:r}=e;-1!==t||-1!==i?(-1===i&&s>=0&&(e.width=this.engine.getSumWidth(),this.isSelectWhole=!0),-1===t&&r>=0&&(e.height=this.engine.getSumHeight(),this.isSelectWhole=!0),this.changeSelectOffset(e),this.engine.dataModel.setSelect({sri:e.sri,sci:e.sci,eri:e.eri,eci:e.eci})):n.modifyCSS(this.$selector,{display:"none"})}changeSelectOffset(e){const t={width:e.width,height:e.height,left:e.left-4,top:e.top-2,display:"block"};this._cellOffset=t,n.modifyCSS(this.$selector,t),this.isEditing&&this.editor.changeOffset(t)}handleEdit(e,t){this._editorText=e}}t.Selector=o},902:(e,t,i)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.ToolBar=void 0;const n=i(928),s=i(312);class r extends s.Shape{initEvent(){const e=this;this.watchHighlight(),document.getElementById("toolbar-bold").addEventListener("click",(function(t){const i=this.classList.contains("active");e.engine.dataModel.command({type:"setRange",properties:{fontWeight:i?"normal":"bold"}}),this.classList.toggle("active")})),document.getElementById("toolbar-fontsize").addEventListener("change",(function(t){const i=this.value;e.engine.dataModel.command({type:"setRange",properties:{fontSize:+i}})})),document.getElementById("toolbar-cellmmfontcolor").addEventListener("change",(function(t){const i=this.value;e.engine.dataModel.command({type:"setRange",properties:{fontColor:i}})})),document.getElementById("toolbar-cellmmbgcolor").addEventListener("change",(function(t){const i=this.value;e.engine.dataModel.command({type:"setRange",properties:{bgcolor:i}})}))}createRender(){return'\n            <div class="xsheet-toolbar">\n                <ul class="xsheet-toolbar-content">\n                    <li class="xsheet-toolbar-item">\n                        <select name="toolbar-fontsize" id="toolbar-fontsize" data-event="setrange:fontsize">\n                            <option value="12">12px</option>\n                            <option value="14">14px</option>\n                            <option value="18">18px</option>\n                            <option value="24">24px</option>\n                        </select>\n                    </li>\n                    <li class="xsheet-toolbar-item" id="toolbar-bold" data-event="setrange:bold">\n                        <div class="toolbar-tip">B</div>\n                    </li>\n                    <li class="xsheet-toolbar-item">\n                        字体颜色\n                        <input type="color" name="cellmmfontcolor" value="#000" id="toolbar-cellmmfontcolor" data-event="setrange:color">\n                    </li>\n                    <li class="xsheet-toolbar-item">\n                        单元格背景颜色\n                        <input type="color" name="cellmmbgcolor" value="#f6b73c" id="toolbar-cellmmbgcolor" data-event="setrange:bgcolor">\n                    </li>\n                </ul>\n            </div>\n        '}watchHighlight(){this.engine.on("canvas:cellclick",(e=>{const t=this.engine.getCell(e),i=document.getElementById("toolbar-bold");i.classList.remove("active"),n.isNil(t)||n.each(t,((e,t)=>{"fontWeight"===t&&"bold"===e&&i.classList.toggle("active")}))}))}}t.ToolBar=r},655:(e,t,i)=>{i.r(t),i.d(t,{__extends:()=>s,__assign:()=>r,__rest:()=>o,__decorate:()=>a,__param:()=>l,__metadata:()=>c,__awaiter:()=>h,__generator:()=>d,__createBinding:()=>u,__exportStar:()=>g,__values:()=>f,__read:()=>p,__spread:()=>v,__spreadArrays:()=>_,__spreadArray:()=>m,__await:()=>y,__asyncGenerator:()=>x,__asyncDelegator:()=>w,__asyncValues:()=>b,__makeTemplateObject:()=>S,__importStar:()=>E,__importDefault:()=>R,__classPrivateFieldGet:()=>C,__classPrivateFieldSet:()=>M});var n=function(e,t){return(n=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var i in t)Object.prototype.hasOwnProperty.call(t,i)&&(e[i]=t[i])})(e,t)};function s(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Class extends value "+String(t)+" is not a constructor or null");function i(){this.constructor=e}n(e,t),e.prototype=null===t?Object.create(t):(i.prototype=t.prototype,new i)}var r=function(){return(r=Object.assign||function(e){for(var t,i=1,n=arguments.length;i<n;i++)for(var s in t=arguments[i])Object.prototype.hasOwnProperty.call(t,s)&&(e[s]=t[s]);return e}).apply(this,arguments)};function o(e,t){var i={};for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&t.indexOf(n)<0&&(i[n]=e[n]);if(null!=e&&"function"==typeof Object.getOwnPropertySymbols){var s=0;for(n=Object.getOwnPropertySymbols(e);s<n.length;s++)t.indexOf(n[s])<0&&Object.prototype.propertyIsEnumerable.call(e,n[s])&&(i[n[s]]=e[n[s]])}return i}function a(e,t,i,n){var s,r=arguments.length,o=r<3?t:null===n?n=Object.getOwnPropertyDescriptor(t,i):n;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)o=Reflect.decorate(e,t,i,n);else for(var a=e.length-1;a>=0;a--)(s=e[a])&&(o=(r<3?s(o):r>3?s(t,i,o):s(t,i))||o);return r>3&&o&&Object.defineProperty(t,i,o),o}function l(e,t){return function(i,n){t(i,n,e)}}function c(e,t){if("object"==typeof Reflect&&"function"==typeof Reflect.metadata)return Reflect.metadata(e,t)}function h(e,t,i,n){return new(i||(i=Promise))((function(s,r){function o(e){try{l(n.next(e))}catch(e){r(e)}}function a(e){try{l(n.throw(e))}catch(e){r(e)}}function l(e){var t;e.done?s(e.value):(t=e.value,t instanceof i?t:new i((function(e){e(t)}))).then(o,a)}l((n=n.apply(e,t||[])).next())}))}function d(e,t){var i,n,s,r,o={label:0,sent:function(){if(1&s[0])throw s[1];return s[1]},trys:[],ops:[]};return r={next:a(0),throw:a(1),return:a(2)},"function"==typeof Symbol&&(r[Symbol.iterator]=function(){return this}),r;function a(r){return function(a){return function(r){if(i)throw new TypeError("Generator is already executing.");for(;o;)try{if(i=1,n&&(s=2&r[0]?n.return:r[0]?n.throw||((s=n.return)&&s.call(n),0):n.next)&&!(s=s.call(n,r[1])).done)return s;switch(n=0,s&&(r=[2&r[0],s.value]),r[0]){case 0:case 1:s=r;break;case 4:return o.label++,{value:r[1],done:!1};case 5:o.label++,n=r[1],r=[0];continue;case 7:r=o.ops.pop(),o.trys.pop();continue;default:if(!((s=(s=o.trys).length>0&&s[s.length-1])||6!==r[0]&&2!==r[0])){o=0;continue}if(3===r[0]&&(!s||r[1]>s[0]&&r[1]<s[3])){o.label=r[1];break}if(6===r[0]&&o.label<s[1]){o.label=s[1],s=r;break}if(s&&o.label<s[2]){o.label=s[2],o.ops.push(r);break}s[2]&&o.ops.pop(),o.trys.pop();continue}r=t.call(e,o)}catch(e){r=[6,e],n=0}finally{i=s=0}if(5&r[0])throw r[1];return{value:r[0]?r[1]:void 0,done:!0}}([r,a])}}}var u=Object.create?function(e,t,i,n){void 0===n&&(n=i),Object.defineProperty(e,n,{enumerable:!0,get:function(){return t[i]}})}:function(e,t,i,n){void 0===n&&(n=i),e[n]=t[i]};function g(e,t){for(var i in e)"default"===i||Object.prototype.hasOwnProperty.call(t,i)||u(t,e,i)}function f(e){var t="function"==typeof Symbol&&Symbol.iterator,i=t&&e[t],n=0;if(i)return i.call(e);if(e&&"number"==typeof e.length)return{next:function(){return e&&n>=e.length&&(e=void 0),{value:e&&e[n++],done:!e}}};throw new TypeError(t?"Object is not iterable.":"Symbol.iterator is not defined.")}function p(e,t){var i="function"==typeof Symbol&&e[Symbol.iterator];if(!i)return e;var n,s,r=i.call(e),o=[];try{for(;(void 0===t||t-- >0)&&!(n=r.next()).done;)o.push(n.value)}catch(e){s={error:e}}finally{try{n&&!n.done&&(i=r.return)&&i.call(r)}finally{if(s)throw s.error}}return o}function v(){for(var e=[],t=0;t<arguments.length;t++)e=e.concat(p(arguments[t]));return e}function _(){for(var e=0,t=0,i=arguments.length;t<i;t++)e+=arguments[t].length;var n=Array(e),s=0;for(t=0;t<i;t++)for(var r=arguments[t],o=0,a=r.length;o<a;o++,s++)n[s]=r[o];return n}function m(e,t){for(var i=0,n=t.length,s=e.length;i<n;i++,s++)e[s]=t[i];return e}function y(e){return this instanceof y?(this.v=e,this):new y(e)}function x(e,t,i){if(!Symbol.asyncIterator)throw new TypeError("Symbol.asyncIterator is not defined.");var n,s=i.apply(e,t||[]),r=[];return n={},o("next"),o("throw"),o("return"),n[Symbol.asyncIterator]=function(){return this},n;function o(e){s[e]&&(n[e]=function(t){return new Promise((function(i,n){r.push([e,t,i,n])>1||a(e,t)}))})}function a(e,t){try{(i=s[e](t)).value instanceof y?Promise.resolve(i.value.v).then(l,c):h(r[0][2],i)}catch(e){h(r[0][3],e)}var i}function l(e){a("next",e)}function c(e){a("throw",e)}function h(e,t){e(t),r.shift(),r.length&&a(r[0][0],r[0][1])}}function w(e){var t,i;return t={},n("next"),n("throw",(function(e){throw e})),n("return"),t[Symbol.iterator]=function(){return this},t;function n(n,s){t[n]=e[n]?function(t){return(i=!i)?{value:y(e[n](t)),done:"return"===n}:s?s(t):t}:s}}function b(e){if(!Symbol.asyncIterator)throw new TypeError("Symbol.asyncIterator is not defined.");var t,i=e[Symbol.asyncIterator];return i?i.call(e):(e=f(e),t={},n("next"),n("throw"),n("return"),t[Symbol.asyncIterator]=function(){return this},t);function n(i){t[i]=e[i]&&function(t){return new Promise((function(n,s){!function(e,t,i,n){Promise.resolve(n).then((function(t){e({value:t,done:i})}),t)}(n,s,(t=e[i](t)).done,t.value)}))}}}function S(e,t){return Object.defineProperty?Object.defineProperty(e,"raw",{value:t}):e.raw=t,e}var O=Object.create?function(e,t){Object.defineProperty(e,"default",{enumerable:!0,value:t})}:function(e,t){e.default=t};function E(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var i in e)"default"!==i&&Object.prototype.hasOwnProperty.call(e,i)&&u(t,e,i);return O(t,e),t}function R(e){return e&&e.__esModule?e:{default:e}}function C(e,t,i,n){if("a"===i&&!n)throw new TypeError("Private accessor was defined without a getter");if("function"==typeof t?e!==t||!n:!t.has(e))throw new TypeError("Cannot read private member from an object whose class did not declare it");return"m"===i?n:"a"===i?n.call(e):n?n.value:t.get(e)}function M(e,t,i,n,s){if("m"===n)throw new TypeError("Private method is not writable");if("a"===n&&!s)throw new TypeError("Private accessor was defined without a setter");if("function"==typeof t?e!==t||!s:!t.has(e))throw new TypeError("Cannot write private member to an object whose class did not declare it");return"a"===n?s.call(e,i):s?s.value=i:t.set(e,i),i}}},t={};function i(n){var s=t[n];if(void 0!==s)return s.exports;var r=t[n]={exports:{}};return e[n](r,r.exports,i),r.exports}i.d=(e,t)=>{for(var n in t)i.o(t,n)&&!i.o(e,n)&&Object.defineProperty(e,n,{enumerable:!0,get:t[n]})},i.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),i.r=e=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},(()=>{const e=i(913),t=i(902),n=i(544),s=i(340);i(124),e.RegisterView(t.ToolBar,"toolbar"),e.RegisterView(n.ScrollBar,"scrollbar"),e.RegisterView(s.Selector,"selector");const r={create:(t,i)=>new e.Engine(Object.assign({container:t},i))};window&&(window.XWebExcel=r)})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,